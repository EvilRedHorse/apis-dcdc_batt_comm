class <%= camelize(klass) %>(eza2500_base.EZA2500CommandBase):
  """ EZA2500 <%= name %> """

  COMMAND = <%= command %>
  CMD_LEN = <%= send_len %>
  ACK_LEN = <%= ack_len %>
  NAK_LEN = 2

  def __init__(self, device):
    super(<%= camelize(klass) %>, self).__init__(device)
    self.response = {}

  def pack_senddata(self, ad1, ad2, params = {}):
<% send_syms.each do |sym| -%>
    if '<%= sym %>' in params:
      _<%= sym %> = params['<%= sym %>']
    else:
      raise ESSXParameterException('no parameter: <%= sym %>')
<% end -%>
<% send_convs.each do |conv| -%>
    <%= conv %>
<% end -%>
    req = pack("<<%= send_packstr %>", <%= send_packsym.join(" ,") %>) + b"00"
    return eza2500_util.replace_check_sum(req)

  def send(self, ad1, ad2, params = {}):
    send_data = self.pack_senddata(ad1, ad2, params)
    essx_debug.log('send')
    essx_debug.dump(send_data)
    self.device.write(send_data)
    return send_data

  def recv(self):
    essx_debug.log('recv')
    recv_data = self._recv()

    self.response_raw = recv_data
    res = {}
    (_sfd, _len, _ad1, _ad2, _cmd) = unpack("BBBBB", recv_data[0:5])
    if _cmd == <%= '0x%02x' % command %>: #ACK
      (<%= ack_packsym.join(" ,") %>) = unpack("<<%= ack_packstr %>", recv_data[5:])
<% ack_convs.each do |conv| -%>
      <%= conv %>
<% end -%>
<% ack_syms.each do |sym| -%>
      res["<%= sym %>"] = _<%= sym %>
<% end -%>
      self.response = res
    elif _cmd == <%= '0x%02x' % (command | 0x80) %>: #NAK
      (<%= nak_packsym.join(" ,") %>) = unpack("<<%= nak_packstr %>", recv_data[5:])
<% nak_syms.each do |sym| -%>
      res["<%= sym %>"] = _<%= sym %>
<% end -%>
      self.response = res
      raise ESSXDeviceException("error: ERCD=%x" % _ercd)
    else:
      raise ESSXValueException("bad response")

    self.response = res
    essx_debug.log('recv')
    #essx_debug.dump(recv_data)
    return recv_data

  @classmethod
  def unit_test(cls, dev = None, params = None):
    from io import BytesIO

    class Dummy:
      def __init__(self):
<% ack_debug_statements.each do |st| -%>
        <%= st %>
<% end -%>
        data = pack("<BBBBB<%= ack_packstr %>", 2, <%= camelize(klass) %>.ACK_LEN, 1, 2, <%= '0x%02x' % command %>, <%= ack_packsym.join(" ,") %>)
        _chksum = eza2500_util.calc_check_sum(data)
        self.reader = BytesIO(data[:-2] + pack('BB', _chksum % 256, _chksum // 256))
      def read(self, bytes):
        return self.reader.read(bytes)
      def write(self, data):
        essx_debug.dump(data)

    if dev == None:
      dev = Dummy()

    cmd = <%= camelize(klass) %>(dev)
    if params == None:
      params = {}
<% send_debug_statements.each do |st| -%>
      <%= st %>
<% end -%>
    cmd.send(1, 2, params)
    cmd.recv()
